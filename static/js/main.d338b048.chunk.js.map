{"version":3,"sources":["components/NewTodoForm/NewTodoForm.jsx","shapes/TodoShape.js","components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/TodoFilters/TodoFilters.jsx","constants/constants.js","App.js","hooks/useLocalStorage.js","index.js"],"names":["NewTodoForm","addNewTodo","useState","todoTitle","setTodoTitle","onSubmit","event","preventDefault","length","type","value","onChange","target","className","placeholder","PropTypes","number","isRequired","bool","string","TodoItem","item","changeTodoStatus","deleteTodo","changeTodoTitle","title","newTitle","setNewTitle","isInputEditing","setInputEditing","classnames","completed","editing","onDoubleClick","checked","id","onClick","onKeyDown","key","onBlur","TodoList","items","map","defaultProps","TodoFilters","FILTERS","setTodosFilter","todosFilter","href","selected","all","active","App","defaultValue","stored","localStorage","getItem","initial","JSON","parse","setValue","useEffect","setItem","stringify","useLocalStorage","todoList","setTodoList","isAllTodosMarked","setIsAllTodoMarked","filteredTodos","useMemo","filter","todo","filterTodosByStatus","activeTodos","newTodo","Date","markedTodoList","htmlFor","isTodoActive","updatedTodoList","todoListWithEditedElement","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d338b048.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const NewTodoForm = ({ addNewTodo }) => {\n  const [todoTitle, setTodoTitle] = useState('');\n\n  const handleInputChange = (event) => {\n    const { value } = event.target;\n\n    setTodoTitle(value);\n  };\n\n  const createNewTodo = (event) => {\n    event.preventDefault();\n\n    if (!todoTitle.length) {\n      return;\n    }\n\n    addNewTodo(todoTitle);\n    setTodoTitle('');\n  };\n\n  return (\n    <form onSubmit={createNewTodo}>\n      <input\n        type=\"text\"\n        value={todoTitle}\n        onChange={handleInputChange}\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n      />\n    </form>\n  );\n};\n\nNewTodoForm.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TodoShape = {\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { TodoShape } from '../../shapes/TodoShape';\n\nexport const TodoItem = ({\n  item,\n  changeTodoStatus,\n  deleteTodo,\n  changeTodoTitle,\n}) => {\n  const [newTitle, setNewTitle] = useState(item.title);\n  const [isInputEditing, setInputEditing] = useState(false);\n\n  const updateNewTitle = (event) => {\n    const { value } = event.target;\n\n    setNewTitle(value);\n  };\n\n  const editTodoTitle = (event) => {\n    const { id } = item;\n    const { key } = event;\n\n    if (!newTitle.length) {\n      if (key === 'Enter') {\n        deleteTodo(id);\n        setInputEditing(false);\n\n        return;\n      }\n    }\n\n    switch (key) {\n      case 'Enter':\n        changeTodoTitle(id, newTitle);\n        setInputEditing(false);\n        break;\n\n      case 'Escape':\n        setNewTitle(item.title);\n        setInputEditing(false);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleBlur = (event) => {\n    const { value } = event.target;\n    const { id } = item;\n\n    if (!value) {\n      deleteTodo(id);\n    } else {\n      changeTodoTitle(id, value);\n    }\n\n    setInputEditing(false);\n  };\n\n  return (\n    <li\n      className={classnames({\n        completed: item.completed,\n        editing: isInputEditing,\n      })}\n      onDoubleClick={() => setInputEditing(true)}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          checked={item.completed}\n          onChange={() => changeTodoStatus(item.id, item.completed)}\n          className=\"toggle\"\n        />\n        <label>{item.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(item.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={newTitle}\n        onChange={updateNewTitle}\n        onKeyDown={editTodoTitle}\n        onBlur={handleBlur}\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  item: PropTypes.shape(TodoShape).isRequired,\n  changeTodoStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTodoTitle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoShape } from '../../shapes/TodoShape';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({\n  items,\n  changeTodoStatus,\n  deleteTodo,\n  changeTodoTitle,\n}) => (\n  <ul className=\"todo-list\">\n    {items.map(item => (\n      <TodoItem\n        key={item.id}\n        item={item}\n        changeTodoStatus={changeTodoStatus}\n        deleteTodo={deleteTodo}\n        changeTodoTitle={changeTodoTitle}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape(TodoShape)),\n  changeTodoStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTodoTitle: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  items: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nexport const TodoFilters = ({ FILTERS, setTodosFilter, todosFilter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classnames({\n          selected: todosFilter === FILTERS.all,\n        })}\n        onClick={() => setTodosFilter(FILTERS.all)}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={classnames({\n          selected: todosFilter === FILTERS.active,\n        })}\n        onClick={() => setTodosFilter(FILTERS.active)}\n\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classnames({\n          selected: todosFilter === FILTERS.completed,\n        })}\n        onClick={() => setTodosFilter(FILTERS.completed)}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodoFilters.propTypes = {\n  setTodosFilter: PropTypes.func.isRequired,\n  todosFilter: PropTypes.string.isRequired,\n  FILTERS: PropTypes.shape({\n    all: PropTypes.string.isRequired,\n    active: PropTypes.string.isRequired,\n    completed: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","export const FILTERS = {\n  all: 'all',\n  active: 'active',\n  completed: 'completed',\n};\n","import React, { useMemo, useState } from 'react';\nimport { NewTodoForm } from './components/NewTodoForm';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilters } from './components/TodoFilters';\nimport { useLocalStorage } from './hooks/useLocalStorage';\nimport { FILTERS } from './constants/constants';\n\nconst App = () => {\n  const [todoList, setTodoList] = useLocalStorage(\n    'todoList', [],\n  );\n  const [todosFilter, setTodosFilter] = useState(FILTERS.all);\n  const [isAllTodosMarked, setIsAllTodoMarked] = useState(false);\n\n  const filterTodosByStatus = () => {\n    switch (todosFilter) {\n      case 'all':\n        return todoList;\n\n      case 'active':\n        return todoList.filter(todo => !todo.completed);\n\n      case 'completed':\n        return todoList.filter(todo => todo.completed);\n\n      default:\n        return todoList;\n    }\n  };\n\n  const filteredTodos = useMemo(\n    () => filterTodosByStatus(),\n    [todosFilter, todoList],\n  );\n\n  const activeTodos = useMemo(\n    () => todoList.filter(todo => !todo.completed).length,\n    [todoList],\n  );\n\n  const addNewTodo = (title) => {\n    const newTodo = {\n      id: +new Date(),\n      completed: false,\n      title,\n    };\n\n    setTodoList([...todoList, newTodo]);\n  };\n\n  const changeTodoTitle = (id, newTitle) => {\n    const todoListWithEditedElement = todoList.map(\n      (todo) => {\n        if (todo.id !== id) {\n          return { ...todo };\n        }\n\n        return {\n          ...todo,\n          title: newTitle,\n        };\n      },\n    );\n\n    setTodoList(todoListWithEditedElement);\n  };\n\n  const changeTodoStatus = (id, isTodoActive) => {\n    const updatedTodoList = todoList.map((todo) => {\n      if (todo.id !== id) {\n        return { ...todo };\n      }\n\n      return {\n        ...todo,\n        completed: !isTodoActive,\n      };\n    });\n\n    setTodoList(updatedTodoList);\n  };\n\n  const markAllTodos = () => {\n    const markedTodoList = todoList.map(todo => ({\n      ...todo,\n      completed: isAllTodosMarked,\n    }));\n\n    setIsAllTodoMarked(!isAllTodosMarked);\n    setTodoList(markedTodoList);\n  };\n\n  const deleteTodo = (id) => {\n    setTodoList(todoList.filter(todo => todo.id !== id));\n  };\n\n  const clearCompleted = () => {\n    setTodoList(todoList.filter(todo => !todo.completed));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <NewTodoForm addNewTodo={addNewTodo} />\n      </header>\n\n      <section className=\"main\">\n        {!!todoList.length && (\n          <>\n            <input\n              type=\"checkbox\"\n              checked={isAllTodosMarked}\n              onChange={markAllTodos}\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          </>\n        )}\n\n        <TodoList\n          items={filteredTodos}\n          changeTodoStatus={changeTodoStatus}\n          deleteTodo={deleteTodo}\n          changeTodoTitle={changeTodoTitle}\n        />\n      </section>\n\n      {!!todoList.length && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${activeTodos} items left`}\n          </span>\n\n          <TodoFilters\n            todosFilter={todosFilter}\n            setTodosFilter={setTodosFilter}\n            FILTERS={FILTERS}\n          />\n\n          {(todoList.some(todo => todo.completed)) && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={() => clearCompleted()}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </section>\n  );\n};\n\nexport default App;\n","import { useEffect, useState } from 'react';\n\nexport const useLocalStorage = (key, defaultValue) => {\n  const stored = localStorage.getItem(key);\n  const initial = stored ? JSON.parse(stored) : defaultValue;\n  const [value, setValue] = useState(initial);\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}