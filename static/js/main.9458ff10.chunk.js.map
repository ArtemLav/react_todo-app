{"version":3,"sources":["components/NewTodoForm/NewTodoForm.jsx","shapes/TodoShape.js","components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/TodoFilters/TodoFilters.jsx","App.js","index.js"],"names":["NewTodoForm","addNewTodo","useState","todoTitle","setTodoTitle","onSubmit","event","preventDefault","length","type","value","onChange","target","className","placeholder","PropTypes","number","isRequired","bool","string","TodoItem","item","changeTodoStatus","deleteTodo","classnames","completed","checked","id","title","onClick","TodoList","items","map","key","defaultProps","TodoFilters","filterTodosByStatus","activeFilter","href","selected","App","originalTodoList","setOriginalTodolist","todoList","setTodoList","activeTodos","setActiveTodos","isAllTodosMarked","setIsAllTodoMarked","setActiveFilter","updateTodos","newTodos","newActiveTodosCount","filter","todo","newTodo","Date","currentActiveTodos","markAllValue","markedTodoList","htmlFor","isTodoActive","updatedTodoList","todoListWithoutDeletedTodo","some","onlyActiveTodos","clearCompleted","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9458ff10.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const NewTodoForm = ({ addNewTodo }) => {\n  const [todoTitle, setTodoTitle] = useState('');\n\n  const handleInputChange = (event) => {\n    const { value } = event.target;\n\n    setTodoTitle(value);\n  };\n\n  const createNewTodo = (event) => {\n    event.preventDefault();\n\n    if (!todoTitle.length) {\n      return;\n    }\n\n    addNewTodo(todoTitle);\n    setTodoTitle('');\n  };\n\n  return (\n    <form onSubmit={createNewTodo}>\n      <input\n        type=\"text\"\n        value={todoTitle}\n        onChange={handleInputChange}\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n      />\n    </form>\n  );\n};\n\nNewTodoForm.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TodoShape = {\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { TodoShape } from '../../shapes/TodoShape';\n\nexport const TodoItem = ({ item, changeTodoStatus, deleteTodo }) => (\n  <li className={classnames({\n    completed: item.completed,\n  })}\n  >\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        checked={item.completed}\n        onChange={() => changeTodoStatus(item.id, item.completed)}\n        className=\"toggle\"\n      />\n      <label>{item.title}</label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => deleteTodo(item.id)}\n      />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </li>\n);\n\nTodoItem.propTypes = {\n  item: PropTypes.shape(TodoShape).isRequired,\n  changeTodoStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoShape } from '../../shapes/TodoShape';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({ items, changeTodoStatus, deleteTodo }) => (\n  <ul className=\"todo-list\">\n    {items.map(item => (\n      <TodoItem\n        key={item.id}\n        item={item}\n        changeTodoStatus={changeTodoStatus}\n        deleteTodo={deleteTodo}\n      />\n    ))}\n\n    {/* <li className=\"editing\"> */}\n    {/*  <div className=\"view\"> */}\n    {/*    <input type=\"checkbox\" className=\"toggle\" /> */}\n    {/*    <label>zxcvbnm</label> */}\n    {/*    <button type=\"button\" className=\"destroy\" /> */}\n    {/*  </div> */}\n    {/*  <input type=\"text\" className=\"edit\" /> */}\n    {/* </li> */}\n  </ul>\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape(TodoShape)),\n  changeTodoStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  items: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nexport const TodoFilters = ({ filterTodosByStatus, activeFilter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classnames({\n          selected: activeFilter === 'all',\n        })}\n        onClick={() => {\n          filterTodosByStatus('all');\n        }}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={classnames({\n          selected: activeFilter === 'active',\n        })}\n        onClick={() => {\n          filterTodosByStatus('active');\n        }}\n\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classnames({\n          selected: activeFilter === 'completed',\n        })}\n        onClick={() => {\n          filterTodosByStatus('completed');\n        }}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodoFilters.propTypes = {\n  filterTodosByStatus: PropTypes.func.isRequired,\n  activeFilter: PropTypes.string,\n};\n\nTodoFilters.defaultProps = {\n  activeFilter: 'all',\n};\n","import React, { useState } from 'react';\nimport { NewTodoForm } from './components/NewTodoForm';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilters } from './components/TodoFilters';\n\nconst App = () => {\n  const [originalTodoList, setOriginalTodolist] = useState([]);\n  const [todoList, setTodoList] = useState([]);\n  const [activeTodos, setActiveTodos] = useState(0);\n  const [isAllTodosMarked, setIsAllTodoMarked] = useState(false);\n  const [activeFilter, setActiveFilter] = useState('all');\n\n  const addNewTodo = (title) => {\n    const newTodo = {\n      id: +new Date(),\n      completed: false,\n      title,\n    };\n\n    const currentActiveTodos = originalTodoList.filter(\n      todo => !todo.completed,\n    ).length + 1;\n\n    setActiveTodos(currentActiveTodos);\n    setOriginalTodolist([...originalTodoList, newTodo]);\n    if (activeFilter !== 'completed') {\n      setTodoList([...todoList, newTodo]);\n    }\n  };\n\n  const updateTodos = (newTodos) => {\n    const newActiveTodosCount = newTodos.filter(\n      todo => !todo.completed,\n    ).length;\n\n    setActiveTodos(newActiveTodosCount);\n    setOriginalTodolist(newTodos);\n    setTodoList(newTodos);\n  };\n\n  const changeTodoStatus = (id, isTodoActive) => {\n    const updatedTodoList = originalTodoList.map((todo) => {\n      if (todo.id !== id) {\n        return {\n          ...todo,\n        };\n      }\n\n      return {\n        ...todo,\n        completed: !isTodoActive,\n      };\n    });\n\n    updateTodos(updatedTodoList);\n  };\n\n  const markAllTodos = () => {\n    const markAllValue = !isAllTodosMarked;\n\n    const markedTodoList = originalTodoList.map(todo => ({\n      ...todo,\n      completed: markAllValue,\n    }));\n\n    updateTodos(markedTodoList);\n    setIsAllTodoMarked(markAllValue);\n  };\n\n  const deleteTodo = (id) => {\n    const todoListWithoutDeletedTodo = originalTodoList.filter(\n      todo => todo.id !== id,\n    );\n\n    updateTodos(todoListWithoutDeletedTodo);\n  };\n\n  const clearCompleted = () => {\n    const onlyActiveTodos = originalTodoList.filter(\n      todo => !todo.completed,\n    );\n\n    updateTodos(onlyActiveTodos);\n  };\n\n  const filterTodosByStatus = (filter) => {\n    setActiveFilter(filter);\n\n    switch (filter) {\n      case 'all':\n        setTodoList([...originalTodoList]);\n        break;\n\n      case 'completed':\n        setTodoList([...originalTodoList].filter(\n          todo => todo.completed,\n        ));\n        break;\n\n      case 'active':\n        setTodoList([...originalTodoList].filter(\n          todo => !todo.completed,\n        ));\n        break;\n\n      default:\n        setTodoList([...originalTodoList]);\n    }\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <NewTodoForm addNewTodo={addNewTodo} />\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          checked={isAllTodosMarked}\n          onChange={markAllTodos}\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          items={todoList}\n          changeTodoStatus={changeTodoStatus}\n          deleteTodo={deleteTodo}\n        />\n      </section>\n\n      {!!originalTodoList.length && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${activeTodos} items left`}\n          </span>\n\n          <TodoFilters\n            filterTodosByStatus={filterTodosByStatus}\n            activeFilter={activeFilter}\n          />\n\n          {(todoList.some(todo => todo.completed)) && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={() => clearCompleted()}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}