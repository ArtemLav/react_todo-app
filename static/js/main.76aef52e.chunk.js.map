{"version":3,"sources":["components/NewTodoForm/NewTodoForm.jsx","shapes/TodoShape.js","components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/TodoFilters/TodoFilters.jsx","hooks/useLocalStorage.js","App.js","index.js"],"names":["NewTodoForm","addNewTodo","useState","todoTitle","setTodoTitle","onSubmit","event","preventDefault","length","type","value","onChange","target","className","placeholder","PropTypes","number","isRequired","bool","string","TodoItem","item","changeTodoStatus","deleteTodo","changeTodoTitle","title","newTitle","setNewTitle","isInputEditing","setIsInputEditing","classnames","completed","editing","onDoubleClick","checked","id","onClick","onKeyDown","key","onBlur","TodoList","items","map","defaultProps","TodoFilters","filterTodosByStatus","activeFilter","href","selected","useLocalStorage","defaultValue","stored","localStorage","getItem","initial","JSON","parse","setValue","useEffect","setItem","stringify","App","originalTodoList","setOriginalTodolist","todoList","setTodoList","activeTodos","setActiveTodos","isAllTodosMarked","setIsAllTodoMarked","setActiveFilter","updateTodos","newTodos","newActiveTodosCount","filter","todo","newTodo","Date","currentActiveTodos","markAllValue","markedTodoList","htmlFor","isTodoActive","updatedTodoList","todoListWithoutDeletedTodo","todoListWithEditedElement","some","onlyActiveTodos","clearCompleted","ReactDOM","render","document","getElementById"],"mappings":"8SAGaA,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACXC,mBAAS,IADE,mBACtCC,EADsC,KAC3BC,EAD2B,KAoB7C,OACE,0BAAMC,SAZc,SAACC,GACrBA,EAAMC,iBAEDJ,EAAUK,SAIfP,EAAWE,GACXC,EAAa,OAKX,2BACEK,KAAK,OACLC,MAAOP,EACPQ,SAtBoB,SAACL,GAAW,IAC5BI,EAAUJ,EAAMM,OAAhBF,MAERN,EAAaM,IAoBTG,UAAU,WACVC,YAAY,6B,mBC3BdC,IAAUC,OAAOC,WACVF,IAAUG,KAAKD,WACnBF,IAAUI,OAAOF,W,eCAbG,EAAW,SAAC,GAKlB,IAJLC,EAII,EAJJA,KACAC,EAGI,EAHJA,iBACAC,EAEI,EAFJA,WACAC,EACI,EADJA,gBACI,EAC4BtB,mBAASmB,EAAKI,OAD1C,mBACGC,EADH,KACaC,EADb,OAEwCzB,oBAAS,GAFjD,mBAEG0B,EAFH,KAEmBC,EAFnB,KAkCJ,OACE,wBACEhB,UAAWiB,IAAW,CACpBC,UAAWV,EAAKU,UAChBC,QAASJ,IAEXK,cAAe,kBAAMJ,GAAkB,KAEvC,yBAAKhB,UAAU,QACb,2BACEJ,KAAK,WACLyB,QAASb,EAAKU,UACdpB,SAAU,kBAAMW,EAAiBD,EAAKc,GAAId,EAAKU,YAC/ClB,UAAU,WAEZ,+BAAQQ,EAAKI,OACb,4BACEhB,KAAK,SACLI,UAAU,UACVuB,QAAS,kBAAMb,EAAWF,EAAKc,QAGnC,2BACE1B,KAAK,OACLI,UAAU,OACVH,MAAOgB,EACPf,SAxDiB,SAACL,GAAW,IACzBI,EAAUJ,EAAMM,OAAhBF,MAERiB,EAAYjB,IAsDR2B,UAnDgB,SAAC/B,GAAW,IACxB6B,EAAOd,EAAPc,GACAG,EAAQhC,EAARgC,IAEI,UAARA,GAAgC,KAAbZ,GACrBH,EAAWY,GACXN,GAAkB,IACD,UAARS,GAAgC,KAAbZ,GAC5BF,EAAgBW,EAAIT,GACpBG,GAAkB,IACD,WAARS,IACTX,EAAYN,EAAKI,OACjBI,GAAkB,KAwChBU,OApCa,SAACjC,GAAW,IACrBI,EAAUJ,EAAMM,OAAhBF,MACAyB,EAAOd,EAAPc,GAERX,EAAgBW,EAAIzB,GACpBmB,GAAkB,QCpCTW,EAAW,SAAC,GAAD,IACtBC,EADsB,EACtBA,MACAnB,EAFsB,EAEtBA,iBACAC,EAHsB,EAGtBA,WACAC,EAJsB,EAItBA,gBAJsB,OAMtB,wBAAIX,UAAU,aACX4B,EAAMC,KAAI,SAAArB,GAAI,OACb,kBAAC,EAAD,CACEiB,IAAKjB,EAAKc,GACVd,KAAMA,EACNC,iBAAkBA,EAClBC,WAAYA,EACZC,gBAAiBA,SAsBzBgB,EAASG,aAAe,CACtBF,MAAO,ICrCF,IAAMG,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,oBAAqBC,EAAxB,EAAwBA,aAAxB,OACzB,wBAAIjC,UAAU,WACZ,4BACE,uBACEkC,KAAK,KACLlC,UAAWiB,IAAW,CACpBkB,SAA2B,QAAjBF,IAEZV,QAAS,WACPS,EAAoB,SANxB,QAaF,4BACE,uBACEE,KAAK,WACLlC,UAAWiB,IAAW,CACpBkB,SAA2B,WAAjBF,IAEZV,QAAS,WACPS,EAAoB,YANxB,WAcF,4BACE,uBACEE,KAAK,cACLlC,UAAWiB,IAAW,CACpBkB,SAA2B,cAAjBF,IAEZV,QAAS,WACPS,EAAoB,eANxB,gBAoBND,EAAYD,aAAe,CACzBG,aAAc,OCvDT,IAAMG,EAAkB,SAACX,EAAKY,GACnC,IAAMC,EAASC,aAAaC,QAAQf,GAC9BgB,EAAUH,EAASI,KAAKC,MAAML,GAAUD,EAFM,EAG1BhD,mBAASoD,GAHiB,mBAG7C5C,EAH6C,KAGtC+C,EAHsC,KASpD,OAJAC,qBAAU,WACRN,aAAaO,QAAQrB,EAAKiB,KAAKK,UAAUlD,MACxC,CAAC4B,EAAK5B,IAEF,CAACA,EAAO+C,ICuKFI,EA5KH,WAAO,IAAD,EACgCZ,EAC9C,gBAAiB,IAFH,mBACTa,EADS,KACSC,EADT,OAIgBd,EAAgB,QAAS,IAJzC,mBAITe,EAJS,KAICC,EAJD,OAKsBhB,EAAgB,cAAe,GALrD,mBAKTiB,EALS,KAKIC,EALJ,OAM+BjE,oBAAS,GANxC,mBAMTkE,EANS,KAMSC,EANT,OAOwBnE,mBAAS,OAPjC,mBAOT4C,EAPS,KAOKwB,EAPL,KAShBZ,qBAAU,WACRb,EAAoBC,KACnB,CAACgB,EAAkBhB,IAEtB,IAeMyB,EAAc,SAACC,GACnB,IAAMC,EAAsBD,EAASE,QACnC,SAAAC,GAAI,OAAKA,EAAK5C,aACdvB,OAEF2D,EAAeM,GACfV,EAAoBS,IAGhB3B,EAAsB,SAAC6B,GAG3B,OAFAJ,EAAgBI,GAERA,GACN,IAAK,YACHT,EAAYH,EAAiBY,QAC3B,SAAAC,GAAI,OAAIA,EAAK5C,cAEf,MAEF,IAAK,SACHkC,EAAYH,EAAiBY,QAC3B,SAAAC,GAAI,OAAKA,EAAK5C,cAEhB,MAEF,QACEkC,EAAYH,KAkElB,OACE,6BAASjD,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCAEA,kBAAC,EAAD,CAAaZ,WAhHA,SAACwB,GAClB,IAAMmD,EAAU,CACdzC,IAAK,IAAI0C,KACT9C,WAAW,EACXN,SAGIqD,EAAqBhB,EAAiBY,QAC1C,SAAAC,GAAI,OAAKA,EAAK5C,aACdvB,OAAS,EAEX2D,EAAeW,GACff,EAAoB,GAAD,mBAAKD,GAAL,CAAuBc,SAuGxC,6BAAS/D,UAAU,QACjB,2BACEJ,KAAK,WACLyB,QAASkC,EACTzD,SAzDa,WACnB,IAAMoE,GAAgBX,EAEhBY,EAAiBlB,EAAiBpB,KAAI,SAAAiC,GAAI,kCAC3CA,GAD2C,IAE9C5C,UAAWgD,OAGbV,EAAmBU,GACnBR,EAAYS,IAiDN7C,GAAG,aACHtB,UAAU,eAEZ,2BAAOoE,QAAQ,cAAf,wBAEA,kBAAC,EAAD,CACExC,MAAOuB,EACP1C,iBAlFiB,SAACa,EAAI+C,GAC5B,IAAMC,EAAkBrB,EAAiBpB,KAAI,SAACiC,GAC5C,OAAIA,EAAKxC,KAAOA,EACP,eACFwC,GAIA,2BACFA,GADL,IAEE5C,WAAYmD,OAIhBX,EAAYY,IAqEN5D,WAtDW,SAACY,GAClB,IAAMiD,EAA6BtB,EAAiBY,QAClD,SAAAC,GAAI,OAAIA,EAAKxC,KAAOA,KAGtBoC,EAAYa,IAkDN5D,gBAvCgB,SAACW,EAAIT,GAC3B,IAAM2D,EAA4BvB,EAAiBpB,KACjD,SAACiC,GACC,OAAIA,EAAKxC,KAAOA,EACPwC,EAGF,2BACFA,GADL,IAEElD,MAAOC,OAKb6C,EAAYc,SA6BPvB,EAAiBtD,QAClB,4BAAQK,UAAU,UAChB,0BAAMA,UAAU,cAAhB,UACMqD,EADN,gBAIA,kBAAC,EAAD,CACErB,oBAAqBA,EACrBC,aAAcA,IAGdgB,EAAiBwB,MAAK,SAAAX,GAAI,OAAIA,EAAK5C,cACnC,4BACEtB,KAAK,SACLI,UAAU,kBACVuB,QAAS,kBAlEE,WACrB,IAAMmD,EAAkBzB,EAAiBY,QACvC,SAAAC,GAAI,OAAKA,EAAK5C,aAGhBwC,EAAYgB,GA6DaC,KAHjB,sBC3JZC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.76aef52e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const NewTodoForm = ({ addNewTodo }) => {\n  const [todoTitle, setTodoTitle] = useState('');\n\n  const handleInputChange = (event) => {\n    const { value } = event.target;\n\n    setTodoTitle(value);\n  };\n\n  const createNewTodo = (event) => {\n    event.preventDefault();\n\n    if (!todoTitle.length) {\n      return;\n    }\n\n    addNewTodo(todoTitle);\n    setTodoTitle('');\n  };\n\n  return (\n    <form onSubmit={createNewTodo}>\n      <input\n        type=\"text\"\n        value={todoTitle}\n        onChange={handleInputChange}\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n      />\n    </form>\n  );\n};\n\nNewTodoForm.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TodoShape = {\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { TodoShape } from '../../shapes/TodoShape';\n\nexport const TodoItem = ({\n  item,\n  changeTodoStatus,\n  deleteTodo,\n  changeTodoTitle,\n}) => {\n  const [newTitle, setNewTitle] = useState(item.title);\n  const [isInputEditing, setIsInputEditing] = useState(false);\n\n  const updateNewTitle = (event) => {\n    const { value } = event.target;\n\n    setNewTitle(value);\n  };\n\n  const editTodoTitle = (event) => {\n    const { id } = item;\n    const { key } = event;\n\n    if (key === 'Enter' && newTitle === '') {\n      deleteTodo(id);\n      setIsInputEditing(false);\n    } else if (key === 'Enter' && newTitle !== '') {\n      changeTodoTitle(id, newTitle);\n      setIsInputEditing(false);\n    } else if (key === 'Escape') {\n      setNewTitle(item.title);\n      setIsInputEditing(false);\n    }\n  };\n\n  const handleBlur = (event) => {\n    const { value } = event.target;\n    const { id } = item;\n\n    changeTodoTitle(id, value);\n    setIsInputEditing(false);\n  };\n\n  return (\n    <li\n      className={classnames({\n        completed: item.completed,\n        editing: isInputEditing,\n      })}\n      onDoubleClick={() => setIsInputEditing(true)}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          checked={item.completed}\n          onChange={() => changeTodoStatus(item.id, item.completed)}\n          className=\"toggle\"\n        />\n        <label>{item.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(item.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={newTitle}\n        onChange={updateNewTitle}\n        onKeyDown={editTodoTitle}\n        onBlur={handleBlur}\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  item: PropTypes.shape(TodoShape).isRequired,\n  changeTodoStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTodoTitle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoShape } from '../../shapes/TodoShape';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({\n  items,\n  changeTodoStatus,\n  deleteTodo,\n  changeTodoTitle,\n}) => (\n  <ul className=\"todo-list\">\n    {items.map(item => (\n      <TodoItem\n        key={item.id}\n        item={item}\n        changeTodoStatus={changeTodoStatus}\n        deleteTodo={deleteTodo}\n        changeTodoTitle={changeTodoTitle}\n      />\n    ))}\n\n    {/* <li className=\"editing\"> */}\n    {/*  <div className=\"view\"> */}\n    {/*    <input type=\"checkbox\" className=\"toggle\" /> */}\n    {/*    <label>zxcvbnm</label> */}\n    {/*    <button type=\"button\" className=\"destroy\" /> */}\n    {/*  </div> */}\n    {/*  <input type=\"text\" className=\"edit\" /> */}\n    {/* </li> */}\n  </ul>\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape(TodoShape)),\n  changeTodoStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTodoTitle: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  items: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nexport const TodoFilters = ({ filterTodosByStatus, activeFilter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classnames({\n          selected: activeFilter === 'all',\n        })}\n        onClick={() => {\n          filterTodosByStatus('all');\n        }}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={classnames({\n          selected: activeFilter === 'active',\n        })}\n        onClick={() => {\n          filterTodosByStatus('active');\n        }}\n\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classnames({\n          selected: activeFilter === 'completed',\n        })}\n        onClick={() => {\n          filterTodosByStatus('completed');\n        }}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodoFilters.propTypes = {\n  filterTodosByStatus: PropTypes.func.isRequired,\n  activeFilter: PropTypes.string,\n};\n\nTodoFilters.defaultProps = {\n  activeFilter: 'all',\n};\n","import { useEffect, useState } from 'react';\n\nexport const useLocalStorage = (key, defaultValue) => {\n  const stored = localStorage.getItem(key);\n  const initial = stored ? JSON.parse(stored) : defaultValue;\n  const [value, setValue] = useState(initial);\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewTodoForm } from './components/NewTodoForm';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilters } from './components/TodoFilters';\nimport { useLocalStorage } from './hooks/useLocalStorage';\n\nconst App = () => {\n  const [originalTodoList, setOriginalTodolist] = useLocalStorage(\n    'originalTodos', [],\n  );\n  const [todoList, setTodoList] = useLocalStorage('todos', []);\n  const [activeTodos, setActiveTodos] = useLocalStorage('activeTodos', 0);\n  const [isAllTodosMarked, setIsAllTodoMarked] = useState(false);\n  const [activeFilter, setActiveFilter] = useState('all');\n\n  useEffect(() => {\n    filterTodosByStatus(activeFilter);\n  }, [originalTodoList, activeFilter]);\n\n  const addNewTodo = (title) => {\n    const newTodo = {\n      id: +new Date(),\n      completed: false,\n      title,\n    };\n\n    const currentActiveTodos = originalTodoList.filter(\n      todo => !todo.completed,\n    ).length + 1;\n\n    setActiveTodos(currentActiveTodos);\n    setOriginalTodolist([...originalTodoList, newTodo]);\n  };\n\n  const updateTodos = (newTodos) => {\n    const newActiveTodosCount = newTodos.filter(\n      todo => !todo.completed,\n    ).length;\n\n    setActiveTodos(newActiveTodosCount);\n    setOriginalTodolist(newTodos);\n  };\n\n  const filterTodosByStatus = (filter) => {\n    setActiveFilter(filter);\n\n    switch (filter) {\n      case 'completed':\n        setTodoList(originalTodoList.filter(\n          todo => todo.completed,\n        ));\n        break;\n\n      case 'active':\n        setTodoList(originalTodoList.filter(\n          todo => !todo.completed,\n        ));\n        break;\n\n      default:\n        setTodoList(originalTodoList);\n    }\n  };\n\n  const changeTodoStatus = (id, isTodoActive) => {\n    const updatedTodoList = originalTodoList.map((todo) => {\n      if (todo.id !== id) {\n        return {\n          ...todo,\n        };\n      }\n\n      return {\n        ...todo,\n        completed: !isTodoActive,\n      };\n    });\n\n    updateTodos(updatedTodoList);\n  };\n\n  const markAllTodos = () => {\n    const markAllValue = !isAllTodosMarked;\n\n    const markedTodoList = originalTodoList.map(todo => ({\n      ...todo,\n      completed: markAllValue,\n    }));\n\n    setIsAllTodoMarked(markAllValue);\n    updateTodos(markedTodoList);\n  };\n\n  const deleteTodo = (id) => {\n    const todoListWithoutDeletedTodo = originalTodoList.filter(\n      todo => todo.id !== id,\n    );\n\n    updateTodos(todoListWithoutDeletedTodo);\n  };\n\n  const clearCompleted = () => {\n    const onlyActiveTodos = originalTodoList.filter(\n      todo => !todo.completed,\n    );\n\n    updateTodos(onlyActiveTodos);\n  };\n\n  const changeTodoTitle = (id, newTitle) => {\n    const todoListWithEditedElement = originalTodoList.map(\n      (todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          title: newTitle,\n        };\n      },\n    );\n\n    updateTodos(todoListWithEditedElement);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <NewTodoForm addNewTodo={addNewTodo} />\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          checked={isAllTodosMarked}\n          onChange={markAllTodos}\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          items={todoList}\n          changeTodoStatus={changeTodoStatus}\n          deleteTodo={deleteTodo}\n          changeTodoTitle={changeTodoTitle}\n        />\n      </section>\n\n      {!!originalTodoList.length && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${activeTodos} items left`}\n          </span>\n\n          <TodoFilters\n            filterTodosByStatus={filterTodosByStatus}\n            activeFilter={activeFilter}\n          />\n\n          {(originalTodoList.some(todo => todo.completed)) && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={() => clearCompleted()}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}